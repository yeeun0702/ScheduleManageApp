# ✅ Java CI/CD with Gradle + EC2 배포 자동화

name: CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-22.04

    steps:
      # ✅ 1. 저장소 코드 체크아웃
      - name: Checkout source code
        uses: actions/checkout@v4

      # ✅ 2. application-prod.yml 생성 (Secrets에서 값 주입)
      - name: Create application-prod.yml
        run: |
          mkdir -p ./src/main/resources
          echo "${{ secrets.APPLICATION_PROD_YML }}" > ./src/main/resources/application-prod.yml

      # ✅ 3. JDK 21 설치
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # ✅ 4. Gradle 설정 및 권한 부여
      - name: Setup Gradle and grant permission
        uses: gradle/actions/setup-gradle@v4

      - name: Grant execute permission to gradlew
        run: chmod +x gradlew

      # ✅ 5. Gradle 빌드 실행 (테스트는 생략)
      - name: Build with Gradle Wrapper (skip tests)
        run: ./gradlew build -x test

      # ✅ 6. EC2로 JAR 전송
      - name: Copy JAR to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}           # EC2 Public IP
          username: ${{ secrets.EC2_USER }}       # 예: ubuntu
          key: ${{ secrets.EC2_KEY }}             # .pem 파일의 내용
          source: build/libs/*.jar                # 빌드된 JAR 경로
          target: /home/${{ secrets.EC2_USER }}/app/

      # ✅ 7. EC2에서 Spring Boot 앱 재시작
      - name: Restart Spring Boot app via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            pkill -f "${{ secrets.APP_NAME }}.jar" || true
            nohup java -jar /home/${{ secrets.EC2_USER }}/app/${{ secrets.APP_NAME }}.jar > /home/${{ secrets.EC2_USER }}/app/nohup.out 2>&1 &
